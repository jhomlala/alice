// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/cached_alice_http_call.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2068188390220569306),
      name: 'CachedAliceHttpCall',
      lastPropertyId: const obx_int.IdUid(11, 8134225339072812918),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1516028707362159090),
            name: 'objectId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4300192335930645900),
            name: 'id',
            type: 6,
            flags: 32808,
            indexId: const obx_int.IdUid(1, 8394515860817686132)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3213966191000205885),
            name: 'client',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6247677566960652699),
            name: 'loading',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4454211707004133587),
            name: 'secure',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8391884418285945466),
            name: 'method',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3203195198832901748),
            name: 'endpoint',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7889861149412466020),
            name: 'server',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 46420952474449934),
            name: 'uri',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 159505556851051167),
            name: 'duration',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8134225339072812918),
            name: 'dbCreatedTime',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(1, 2068188390220569306),
      lastIndexId: const obx_int.IdUid(1, 8394515860817686132),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    CachedAliceHttpCall: obx_int.EntityDefinition<CachedAliceHttpCall>(
        model: _entities[0],
        toOneRelations: (CachedAliceHttpCall object) => [],
        toManyRelations: (CachedAliceHttpCall object) => {},
        getId: (CachedAliceHttpCall object) => object.objectId,
        setId: (CachedAliceHttpCall object, int id) {
          object.objectId = id;
        },
        objectToFB: (CachedAliceHttpCall object, fb.Builder fbb) {
          final clientOffset = fbb.writeString(object.client);
          final methodOffset = fbb.writeString(object.method);
          final endpointOffset = fbb.writeString(object.endpoint);
          final serverOffset = fbb.writeString(object.server);
          final uriOffset = fbb.writeString(object.uri);
          fbb.startTable(12);
          fbb.addInt64(0, object.objectId);
          fbb.addInt64(1, object.id);
          fbb.addOffset(2, clientOffset);
          fbb.addBool(3, object.loading);
          fbb.addBool(4, object.secure);
          fbb.addOffset(5, methodOffset);
          fbb.addOffset(6, endpointOffset);
          fbb.addOffset(7, serverOffset);
          fbb.addOffset(8, uriOffset);
          fbb.addInt64(9, object.duration);
          fbb.addInt64(10, object.dbCreatedTime);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final objectIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final clientParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final loadingParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final secureParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final methodParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final endpointParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final serverParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final uriParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final durationParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final object = CachedAliceHttpCall(idParam,
              objectId: objectIdParam,
              client: clientParam,
              loading: loadingParam,
              secure: secureParam,
              method: methodParam,
              endpoint: endpointParam,
              server: serverParam,
              uri: uriParam,
              duration: durationParam)
            ..dbCreatedTime =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CachedAliceHttpCall] entity fields to define ObjectBox queries.
class CachedAliceHttpCall_ {
  /// See [CachedAliceHttpCall.objectId].
  static final objectId =
      obx.QueryIntegerProperty<CachedAliceHttpCall>(_entities[0].properties[0]);

  /// See [CachedAliceHttpCall.id].
  static final id =
      obx.QueryIntegerProperty<CachedAliceHttpCall>(_entities[0].properties[1]);

  /// See [CachedAliceHttpCall.client].
  static final client =
      obx.QueryStringProperty<CachedAliceHttpCall>(_entities[0].properties[2]);

  /// See [CachedAliceHttpCall.loading].
  static final loading =
      obx.QueryBooleanProperty<CachedAliceHttpCall>(_entities[0].properties[3]);

  /// See [CachedAliceHttpCall.secure].
  static final secure =
      obx.QueryBooleanProperty<CachedAliceHttpCall>(_entities[0].properties[4]);

  /// See [CachedAliceHttpCall.method].
  static final method =
      obx.QueryStringProperty<CachedAliceHttpCall>(_entities[0].properties[5]);

  /// See [CachedAliceHttpCall.endpoint].
  static final endpoint =
      obx.QueryStringProperty<CachedAliceHttpCall>(_entities[0].properties[6]);

  /// See [CachedAliceHttpCall.server].
  static final server =
      obx.QueryStringProperty<CachedAliceHttpCall>(_entities[0].properties[7]);

  /// See [CachedAliceHttpCall.uri].
  static final uri =
      obx.QueryStringProperty<CachedAliceHttpCall>(_entities[0].properties[8]);

  /// See [CachedAliceHttpCall.duration].
  static final duration =
      obx.QueryIntegerProperty<CachedAliceHttpCall>(_entities[0].properties[9]);

  /// See [CachedAliceHttpCall.dbCreatedTime].
  static final dbCreatedTime = obx.QueryIntegerProperty<CachedAliceHttpCall>(
      _entities[0].properties[10]);
}
